# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram - –° —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import os
import asyncio
import logging
from datetime import datetime, date

from telegram import Update, Message
from telegram.ext import ContextTypes, ApplicationHandlerStop

from keyboards import (kb_main_reply, kb_subjects_reply, kb_user_subjects_reply,
                      kb_subscriptions_menu_reply, kb_cached_result_choice,
                      kb_reminders_menu, kb_subjects_reminders)

from database import (store, save_store, get_recent_parsing, save_parsing_result,
                     clean_old_parsing_cache, add_statgrad_subscription, 
                     remove_statgrad_subscription, get_statgrad_subscriptions)

from utils import subj_by_url, get_current_count, split_message, send_changes_file
from queue_manager import queue_parsing_task, get_queue_status

from config import (OGE_SUBJECT_LIST, EGE_SUBJECT_LIST, OGE_SUBJECTS, EGE_SUBJECTS, 
                   ALL_SUBJECTS, EXAMS_LIST, STATGRAD_OGE_LIST, ALL_EXAMS_LIST, 
                   SUBJECT_MAPPING)

log = logging.getLogger("FIPI-Bot")

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    print(f"üöÄ START –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {update.message.from_user.id}")
    log.info(f"üöÄ START –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {update.message.from_user.id}")
    clean_old_parsing_cache()
    
    await update.message.reply_text(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–ò–ü–ò-–±–æ—Ç!\n\n"
        "üîî –ù–æ–≤–∏–Ω–∫–∞: –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –°—Ç–∞—Ç–≥—Ä–∞–¥–µ!\n"
        "üìö –ü—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –§–ò–ü–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –°—Ç–∞—Ç–≥—Ä–∞–¥–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
        reply_markup=kb_main_reply()
    )

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
    status = await get_queue_status()
    await update.message.reply_text(status, reply_markup=kb_main_reply())

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (Reply –∫–Ω–æ–ø–∫–∏)"""
    message: Message = update.message
    text = message.text
    chat_id = str(message.from_user.id)

    # –î–û–ë–ê–í–¨–¢–ï –û–¢–õ–ê–î–ö–£
    print(f"üî• –ü–û–õ–£–ß–ï–ù–û: '{text}' –æ—Ç {chat_id}")
    print(f"üî• –°–û–°–¢–û–Ø–ù–ò–ï: {context.user_data}")
    log.info(f"Text message: '{text}' from chat_id: {chat_id}")

    # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if context.user_data.get("waiting_for_cache_choice"):
        await handle_cache_choice(message, context, text)
        return

    # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if context.user_data.get("waiting_for_subject"):
        await handle_user_subject_action(message, context, text)
        return

    # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    if text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        context.user_data.clear()
        await message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main_reply())
        return

    # –ü–†–ò–û–†–ò–¢–ï–¢ 4: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "üìö –ü–æ–¥–ø–∏—Å–∫–∏":
        await show_subscriptions_menu(message, context)
    elif text == "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π":
        await show_task_counts(message, context)
    elif text == "üÜî –§–∞–π–ª –≤—Å–µ—Ö ID":
        await show_ids_menu(message, context)
    elif text == "üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å ID":
        await show_compare_menu(message, context)
    elif text == "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è":
        await show_unsubscribe_menu(message, context)
    elif text == "üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏":
        await show_my_subscriptions(message, context)
    elif text == "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏":
        status = await get_queue_status()
        await message.reply_text(status, reply_markup=kb_main_reply())
    elif text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        await show_reminders_menu(message, context)
    elif text == "üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã":
        context.user_data["waiting_for_reminder_sub"] = True
        await message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=kb_subjects_reminders())
    elif text == "üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)":
        await show_my_reminder_subs(message, context)
    elif text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É":
        await message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=kb_subjects_reminders())

    # –ü–†–ò–û–†–ò–¢–ï–¢ 5: –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    elif text in ALL_SUBJECTS:
        if context.user_data.get("waiting_for_reminder_sub"):
            await handle_reminder_subscription(message, context, text)
        else:
            await show_schedule_by_subject(message, context, text)

    # –ü–†–ò–û–†–ò–¢–ï–¢ 6: –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –û–ì–≠/–ï–ì–≠
    elif text.startswith("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –û–ì–≠"):
        await message.reply_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –û–ì–≠:", reply_markup=kb_subjects_reply("oge"))
    elif text.startswith("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ï–ì–≠"):
        await message.reply_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –ï–ì–≠:", reply_markup=kb_subjects_reply("ege"))

    # –ü–†–ò–û–†–ò–¢–ï–¢ 7: –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ü–û–î–ü–ò–°–ö–ò (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π)
    elif text.startswith("–û–ì–≠ ") or text.startswith("–ï–ì–≠ "):
        # ‚ùó –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        if not context.user_data.get("waiting_for_subject"):
            await handle_subject_selection(message, context, text)
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_subject, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –≤—ã—à–µ
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=kb_main_reply())
            context.user_data.clear()

    else:
        await message.reply_text(
            "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:",
            reply_markup=kb_main_reply()
        )

async def handle_cache_choice(message: Message, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ–∂–¥—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –Ω–æ–≤—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    if text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        context.user_data.clear()
        await message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main_reply())
        return

    cached_data = context.user_data.get("cached_result")
    operation = context.user_data.get("pending_operation")
    url = context.user_data.get("pending_url")

    if not cached_data or not operation or not url:
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=kb_main_reply())
        context.user_data.clear()
        return

    if text == "üìÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç":
        if operation == "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ID":
            result = set(cached_data["result"])
            await send_cached_ids_file(message, result, url, cached_data["timestamp"])
        elif operation == "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ID":
            await message.reply_text(
                "‚ö†Ô∏è –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ID –Ω—É–∂–µ–Ω —Å–≤–µ–∂–∏–π –ø–∞—Ä—Å–∏–Ω–≥.\n–ó–∞–ø—É—Å–∫–∞—é –Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥...",
                reply_markup=kb_main_reply()
            )
            await start_new_parsing(message, context, url, operation)

    elif text == "üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥":
        await start_new_parsing(message, context, url, operation)

    else:
        await message.reply_text(
            "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=kb_cached_result_choice()
        )
        return

    context.user_data.clear()

async def send_cached_ids_file(message: Message, ids: set, url: str, timestamp: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å ID"""
    fname = f"cached_ids_{url.split('=')[-1]}_{timestamp.replace(':', '-').replace('.', '_')}.txt"
    
    with open(fname, "w", encoding="utf-8") as f:
        for t in sorted(ids):
            f.write(t + "\n")

    try:
        dt = datetime.fromisoformat(timestamp)
        time_str = dt.strftime("%d.%m.%Y %H:%M")
    except:
        time_str = timestamp

    with open(fname, "rb") as f:
        await message.reply_document(
            f, filename=fname,
            caption=f"üìÅ {subj_by_url(url)}\nüïí –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç {time_str}\nüÜî –í—Å–µ–≥–æ {len(ids)} ID"
        )

    await message.reply_text("‚úÖ –ì–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=kb_main_reply())

    try:
        os.remove(fname)
    except:
        pass

async def start_new_parsing(message: Message, context: ContextTypes.DEFAULT_TYPE, url: str, operation: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
    status_message = await message.reply_text("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É...")

    class EditableQuery:
        def __init__(self, message, status_message):
            self.message = message
            self.status_message = status_message
            self.from_user = message.from_user

        async def edit_message_text(self, text, reply_markup=None):
            try:
                await self.status_message.edit_text(text)
            except Exception as e:
                log.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await self.message.reply_text(text)

    editable_query = EditableQuery(message, status_message)

    if operation == "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ID":
        context.user_data["ids_map"] = {"0": url}
        await queue_parsing_task(editable_query, context, "ids_0", operation, send_ids_file_result)
    elif operation == "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ID":
        context.user_data["cmp_map"] = {"0": url}
        await queue_parsing_task(editable_query, context, "cmp_0", operation, compare_ids_now_result)

async def show_subscriptions_menu(message: Message, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    await message.reply_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞:",
        reply_markup=kb_subscriptions_menu_reply()
    )

def extract_subject_from_fipi_selection(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –≤—ã–±–æ—Ä–∞ –§–ò–ü–ò –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    if text.startswith("–û–ì–≠ "):
        subject_name = text[4:].lower()
    elif text.startswith("–ï–ì–≠ "):
        subject_name = text[4:].lower()
    else:
        return None
    
    return SUBJECT_MAPPING.get(subject_name, subject_name)

async def handle_subject_selection(message: Message, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ü–û–î–ü–ò–°–ö–ò"""
    chat_id = str(message.from_user.id)
    log.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è: {text}")

    if text.startswith("–û–ì–≠ "):
        exam_type = "oge"
        subject_name = text[4:]
        subjects_dict = OGE_SUBJECTS
    elif text.startswith("–ï–ì–≠ "):
        exam_type = "ege"  
        subject_name = text[4:]
        subjects_dict = EGE_SUBJECTS
    else:
        await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.", reply_markup=kb_main_reply())
        return

    url = subjects_dict.get(subject_name)
    if not url:
        await message.reply_text("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=kb_main_reply())
        return

    subs = store["subscriptions"].setdefault(chat_id, [])
    
    if url in subs:
        await message.reply_text(
            f"‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {text}",
            reply_markup=kb_main_reply()
        )
    else:
        subs.append(url)
        
        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –°—Ç–∞—Ç–≥—Ä–∞–¥
        mapped_subject = extract_subject_from_fipi_selection(text)
        if mapped_subject:
            statgrad_added = add_statgrad_subscription(chat_id, mapped_subject)
            if statgrad_added:
                save_store(store)
                await message.reply_text(
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {text}\n"
                    f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –°—Ç–∞—Ç–≥—Ä–∞–¥–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ¬´{mapped_subject}¬ª!\n"
                    f"üìÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ 9:00 –∑–∞ 1 –¥–µ–Ω—å –∏ –∑–∞ 7 –¥–Ω–µ–π –¥–æ —Ä–∞–±–æ—Ç—ã",
                    reply_markup=kb_main_reply()
                )
            else:
                save_store(store)
                await message.reply_text(
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {text}\n"
                    f"‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –°—Ç–∞—Ç–≥—Ä–∞–¥–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ¬´{mapped_subject}¬ª —É–∂–µ –±—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —Ä–∞–Ω–µ–µ",
                    reply_markup=kb_main_reply()
                )
        else:
            save_store(store)
            await message.reply_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {text}",
                reply_markup=kb_main_reply()
            )

async def show_my_subscriptions(message: Message, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = str(message.from_user.id)
    subs = store["subscriptions"].get(chat_id, [])
    statgrad_subs = get_statgrad_subscriptions(chat_id)
    
    if not subs and not statgrad_subs:
        await message.reply_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.",
            reply_markup=kb_main_reply()
        )
    else:
        text_lines = []
        
        if subs:
            text_lines.append("üìö –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –§–ò–ü–ò:")
            for i, url in enumerate(subs, 1):
                text_lines.append(f"{i}. {subj_by_url(url)}")
        
        if statgrad_subs:
            if subs:
                text_lines.append("")
            text_lines.append("üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –°—Ç–∞—Ç–≥—Ä–∞–¥:")
            for i, subject in enumerate(statgrad_subs, 1):
                text_lines.append(f"{i}. {subject.title()}")

        await message.reply_text(
            "\n".join(text_lines),
            reply_markup=kb_main_reply()
        )

async def show_task_counts(message: Message, context: ContextTypes.DEFAULT_TYPE):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ù–ï –ë–õ–û–ö–ò–†–£–ï–¢ –ë–û–¢"""
    chat_id = str(message.from_user.id)
    subs = store["subscriptions"].get(chat_id, [])
    
    if not subs:
        await message.reply_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.",
            reply_markup=kb_main_reply()
        )
        return

    msg = await message.reply_text("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")

    lines = ["üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π:"]

    # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï - –ù–ï –ë–õ–û–ö–ò–†–£–ï–¢ –ë–û–¢
    tasks = []
    for url in subs:
        task = asyncio.get_event_loop().run_in_executor(None, get_current_count, url)
        tasks.append((url, task))

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏  
    for i, (url, task) in enumerate(tasks, 1):
        try:
            await msg.edit_text(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö... ({i}/{len(subs)})")
            cnt = await task
            lines.append(f"‚Ä¢ {subj_by_url(url)}: {cnt if cnt is not None else '–Ω–µ –ø–æ–ª—É—á–µ–Ω–æ'}")
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è {url}: {e}")
            lines.append(f"‚Ä¢ {subj_by_url(url)}: –æ—à–∏–±–∫–∞")

    await msg.edit_text("\n".join(lines))
    await message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=kb_main_reply())

async def show_ids_menu(message: Message, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ID"""
    chat_id = str(message.from_user.id)
    subs = store["subscriptions"].get(chat_id, [])
    
    if not subs:
        await message.reply_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.",
            reply_markup=kb_main_reply()
        )
        return

    context.user_data["waiting_for_subject"] = "ids"
    context.user_data["current_operation"] = "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ID"
    await message.reply_text(
        "üÜî –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ID:",
        reply_markup=kb_user_subjects_reply(subs, "ids")
    )

async def show_compare_menu(message: Message, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ID"""
    chat_id = str(message.from_user.id)
    subs = store["subscriptions"].get(chat_id, [])
    
    if not subs:
        await message.reply_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.",
            reply_markup=kb_main_reply()
        )
        return

    context.user_data["waiting_for_subject"] = "compare"
    context.user_data["current_operation"] = "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ID"
    await message.reply_text(
        "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ID:",
        reply_markup=kb_user_subjects_reply(subs, "compare")
    )

async def show_unsubscribe_menu(message: Message, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏"""
    chat_id = str(message.from_user.id)
    subs = store["subscriptions"].get(chat_id, [])
    
    if not subs:
        await message.reply_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.",
            reply_markup=kb_main_reply()
        )
        return

    context.user_data["waiting_for_subject"] = "unsubscribe"
    await message.reply_text(
        "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:",
        reply_markup=kb_user_subjects_reply(subs, "unsubscribe")
    )

async def handle_user_subject_action(message: Message, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    action = context.user_data.get("waiting_for_subject")
    operation = context.user_data.get("current_operation")

    if text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        context.user_data.clear()
        await message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main_reply())
        return

    chat_id = str(message.from_user.id)
    subs = store["subscriptions"].get(chat_id, [])
    
    url = None
    for sub_url in subs:
        if subj_by_url(sub_url) == text:
            url = sub_url
            break

    if not url:
        await message.reply_text(
            "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=kb_user_subjects_reply(subs, action)
        )
        return

    context.user_data.pop("waiting_for_subject", None)

    if action == "unsubscribe":
        await process_unsubscribe(message, context, url)
    else:
        if operation in ["–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ID", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ID"]:
            cached = get_recent_parsing(url, operation)
            if cached:
                try:
                    dt = datetime.fromisoformat(cached["timestamp"])
                    time_str = dt.strftime("%d.%m.%Y %H:%M")
                except:
                    time_str = cached["timestamp"]

                context.user_data["cached_result"] = cached
                context.user_data["pending_operation"] = operation
                context.user_data["pending_url"] = url
                context.user_data["waiting_for_cache_choice"] = True

                await message.reply_text(
                    f"üìÅ –ù–∞–π–¥–µ–Ω –Ω–µ–¥–∞–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞!\n\n"
                    f"üìö {subj_by_url(url)}\n"
                    f"üïí –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {time_str}\n"
                    f"üìã –û–ø–µ—Ä–∞—Ü–∏—è: {operation}\n"
                    f"üÜî –ù–∞–π–¥–µ–Ω–æ ID: {len(cached['result'])}\n\n"
                    f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                    reply_markup=kb_cached_result_choice()
                )
                return

        if action == "ids":
            await start_ids_parsing(message, context, url)
        elif action == "compare":
            await start_compare_parsing(message, context, url)

    context.user_data.clear()

async def start_ids_parsing(message: Message, context: ContextTypes.DEFAULT_TYPE, url: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ ID"""
    await start_new_parsing(message, context, url, "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ID")

async def start_compare_parsing(message: Message, context: ContextTypes.DEFAULT_TYPE, url: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ ID"""
    await start_new_parsing(message, context, url, "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ID")

async def process_unsubscribe(message: Message, context: ContextTypes.DEFAULT_TYPE, url: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø–∏—Å–∫—É"""
    chat_id = str(message.from_user.id)
    subs = store["subscriptions"].get(chat_id, [])
    
    if url in subs:
        subs.remove(url)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –°—Ç–∞—Ç–≥—Ä–∞–¥–∞
        subject_text = subj_by_url(url)
        mapped_subject = extract_subject_from_fipi_selection(subject_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ—Ç –∂–µ –ø—Ä–µ–¥–º–µ—Ç
        still_subscribed_to_subject = False
        if mapped_subject:
            for remaining_url in subs:
                remaining_subject_text = subj_by_url(remaining_url)  
                remaining_mapped_subject = extract_subject_from_fipi_selection(remaining_subject_text)
                if remaining_mapped_subject == mapped_subject:
                    still_subscribed_to_subject = True
                    break
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç, –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç –°—Ç–∞—Ç–≥—Ä–∞–¥–∞
        if mapped_subject and not still_subscribed_to_subject:
            statgrad_removed = remove_statgrad_subscription(chat_id, mapped_subject)
            if statgrad_removed:
                save_store(store)
                await message.reply_text(
                    f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç: {subj_by_url(url)}\n"
                    f"üéØ –¢–∞–∫–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –°—Ç–∞—Ç–≥—Ä–∞–¥–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ¬´{mapped_subject}¬ª",
                    reply_markup=kb_main_reply()
                )
            else:
                save_store(store)
                await message.reply_text(
                    f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç: {subj_by_url(url)}",
                    reply_markup=kb_main_reply()
                )
        else:
            save_store(store)
            await message.reply_text(
                f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç: {subj_by_url(url)}",
                reply_markup=kb_main_reply()
            )
    else:
        await message.reply_text(
            "‚ùå –í—ã —É–∂–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç.",
            reply_markup=kb_main_reply()
        )

async def send_ids_file_result(query, context: ContextTypes.DEFAULT_TYPE, ids: set, url: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å ID –∑–∞–¥–∞–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à"""
    fname = f"ids_{url.split('=')[-1]}.txt"
    
    with open(fname, "w", encoding="utf-8") as f:
        for t in sorted(ids):
            f.write(t + "\n")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    save_parsing_result(url, "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ID", ids, str(query.from_user.id))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")

    with open(fname, "rb") as f:
        await query.message.reply_document(
            f, filename=fname,
            caption=f"üÜî {subj_by_url(url)} ‚Ä¢ –≤—Å–µ–≥–æ {len(ids)} ID"
        )

    await query.message.reply_text("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=kb_main_reply())

    try:
        os.remove(fname)
    except:
        pass

async def compare_ids_now_result(query, context: ContextTypes.DEFAULT_TYPE, result: tuple, url: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ID"""
    current_ids, added, removed = result
    timestamp = datetime.now().isoformat()

    if not added and not removed:
        await query.edit_message_text("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await query.message.reply_text(
            "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç.",
            reply_markup=kb_main_reply()
        )
    else:
        await query.edit_message_text("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
        
        txt_lines = ["üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã:"]
        if added:
            txt_lines.append(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã ({len(added)}): " + ", ".join(sorted(list(added)[:10])))
            if len(added) > 10:
                txt_lines.append(f" ... –∏ –µ—â—ë {len(added) - 10}")
        if removed:
            txt_lines.append(f"‚ûñ –£–¥–∞–ª–µ–Ω—ã ({len(removed)}): " + ", ".join(sorted(list(removed)[:10])))
            if len(removed) > 10:
                txt_lines.append(f" ... –∏ –µ—â—ë {len(removed) - 10}")

        txt = "\n".join(txt_lines)
        messages = split_message(txt)
        for msg in messages:
            await query.message.reply_text(msg)

        await send_changes_file(query, context, url, added, removed, timestamp)
        await query.message.reply_text("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", reply_markup=kb_main_reply())

async def on_shutdown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    log.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞, –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤")
    from queue_manager import shutdown_executor
    await shutdown_executor()
    raise ApplicationHandlerStop

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    log.error(f"–û—à–∏–±–∫–∞: {context.error}")

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def show_reminders_menu(message: Message, context: ContextTypes.DEFAULT_TYPE):
    await message.reply_text("üìÖ –ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=kb_reminders_menu())

async def handle_reminder_subscription(message: Message, context: ContextTypes.DEFAULT_TYPE, text: str):
    chat_id = str(message.from_user.id)
    subs = store["reminder_subscriptions"].setdefault(chat_id, [])
    
    if text in subs:
        subs.remove(text)
        await message.reply_text(f"‚úÖ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {text}", reply_markup=kb_reminders_menu())
    else:
        subs.append(text)
        await message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {text}", reply_markup=kb_reminders_menu())
    
    save_store(store)
    context.user_data.clear()

async def show_my_reminder_subs(message: Message, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(message.from_user.id)
    subs = store["reminder_subscriptions"].get(chat_id, [])
    
    if not subs:
        await message.reply_text("üì≠ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=kb_reminders_menu())
    else:
        text = "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n".join(subs)
        await message.reply_text(text, reply_markup=kb_reminders_menu())
    
    context.user_data.clear()

async def show_schedule_by_subject(message: Message, context: ContextTypes.DEFAULT_TYPE, text: str):
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —ç–∫–∑–∞–º–µ–Ω—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
    subject_exams = [exam for exam in ALL_EXAMS_LIST if exam["subject"] == text]
    
    if not subject_exams:
        await message.reply_text(f"–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {text}.", reply_markup=kb_reminders_menu())
        return

    msg_text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {text}:\n\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —ç–∫–∑–∞–º–µ–Ω–æ–≤
    ege_exams = [e for e in subject_exams if e.get("grade") != 9]
    oge_exams = [e for e in subject_exams if e.get("grade") == 9]
    
    if ege_exams:
        msg_text += "üéì –ï–ì–≠ (11 –∫–ª–∞—Å—Å):\n"
        for exam in sorted(ege_exams, key=lambda x: x["date"]):
            msg_text += f"‚Ä¢ {exam['date'].strftime('%d.%m.%Y')}: {exam['title']}\n"
        msg_text += "\n"
    
    if oge_exams:
        msg_text += "üìù –û–ì–≠ (9 –∫–ª–∞—Å—Å):\n"
        for exam in sorted(oge_exams, key=lambda x: x["date"]):
            msg_text += f"‚Ä¢ {exam['date'].strftime('%d.%m.%Y')}: {exam['title']}\n"

    await message.reply_text(msg_text, reply_markup=kb_reminders_menu())
    context.user_data.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
async def send_notification(context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞—Ç—ã –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    today = date.today()
    bot = context.bot

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ï–ì–≠ —ç–∫–∑–∞–º–µ–Ω—ã (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    for exam in EXAMS_LIST:
        days_until = (exam["date"] - today).days
        
        if days_until in (1, 7):
            message_text = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ß–µ—Ä–µ–∑ {days_until} –¥–µ–Ω—å(–¥–Ω—è) —Å–æ—Å—Ç–æ–∏—Ç—Å—è:\n{exam['title']}"
            
            subscribers = []
            for chat_id, subjects in store.get("reminder_subscriptions", {}).items():
                if exam["subject"] in subjects:
                    subscribers.append(chat_id)

            for user_id in subscribers:
                try:
                    await bot.send_message(chat_id=user_id, text=message_text)
                    log.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ï–ì–≠ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ {exam['subject']}")
                except Exception as e:
                    log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ï–ì–≠ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                await asyncio.sleep(0.1)

    # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –°—Ç–∞—Ç–≥—Ä–∞–¥ —ç–∫–∑–∞–º–µ–Ω—ã
    for exam in STATGRAD_OGE_LIST:
        days_until = (exam["date"] - today).days
        
        if days_until in (1, 7):
            message_text = f"üéØ –°—Ç–∞—Ç–≥—Ä–∞–¥ —á–µ—Ä–µ–∑ {days_until} –¥–µ–Ω—å(–¥–Ω—è)!\nüìö {exam['title']}"
            
            subscribers = []
            for chat_id, subjects in store.get("statgrad_subscriptions", {}).items():
                if exam["subject"] in subjects:
                    subscribers.append(chat_id)

            for user_id in subscribers:
                try:
                    await bot.send_message(chat_id=user_id, text=message_text)
                    log.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –°—Ç–∞—Ç–≥—Ä–∞–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ {exam['subject']}")
                except Exception as e:
                    log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –°—Ç–∞—Ç–≥—Ä–∞–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                await asyncio.sleep(0.1)
