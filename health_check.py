import asyncio
import aiohttp
import logging
from datetime import datetime, timedelta


class BotHealthChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""

    def __init__(self, bot_token, admin_chat_id):
        self.bot_token = bot_token
        self.admin_chat_id = admin_chat_id
        self.last_activity = datetime.now()
        self.error_count = 0

    async def check_bot_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                        f"https://api.telegram.org/bot{self.bot_token}/getMe"
                ) as response:
                    if response.status == 200:
                        self.error_count = 0
                        return True
                    else:
                        self.error_count += 1
                        return False
        except Exception as e:
            self.error_count += 1
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return False

    async def send_alert(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É"""
        try:
            async with aiohttp.ClientSession() as session:
                await session.post(
                    f"https://api.telegram.org/bot{self.bot_token}/sendMessage",
                    json={
                        "chat_id": self.admin_chat_id,
                        "text": f"üö® ALERT: {message}\nüïê {datetime.now()}"
                    }
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
