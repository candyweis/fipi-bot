# -*- coding: utf-8 -*-
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ - –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò EVENT LOOP
"""
import asyncio
import logging
import os
import time
import psutil
from concurrent.futures import ProcessPoolExecutor
from datetime import datetime
from telegram import CallbackQuery
from telegram.ext import ContextTypes
from typing import Dict

from parser import TaskIdExtractor
from database import store, save_store
from keyboards import kb_main_reply
from config import (PARSING_TIMEOUT, MAX_CONCURRENT_PARSING, MAX_CONCURRENT_AUTO_PARSING,
                    MEMORY_LIMIT_PERCENT, CPU_LIMIT_PERCENT)

log = logging.getLogger("FIPI-Bot")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
executor = None
active_tasks: Dict[str, Dict] = {}
running_futures: Dict[str, asyncio.Future] = {}


def parsing_worker_with_progress(url: str, operation: str, chat_id: str, task_id: str):
    """–†–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    try:
        log.info(f"üöÄ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è {url}: {operation} (Task: {task_id})")

        os.environ['PARSING_PROCESS'] = '1'
        os.environ['PARSING_CHAT_ID'] = chat_id
        os.environ['PARSING_TASK_ID'] = task_id

        progress_file = f"progress_{task_id}.txt"

        def update_progress(message: str):
            try:
                with open(progress_file, "w", encoding="utf-8") as f:
                    f.write(message)
            except Exception as e:
                log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è {task_id}: {e}")

        class ProgressExtractor(TaskIdExtractor):
            def __init__(self, progress_callback, *args, **kwargs):
                super().__init__(*args, **kwargs)
                self.progress_callback = progress_callback

            def extract_ids_sync(self, url: str):
                self.progress_callback("üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è...")
                self.start_time = time.time()

                try:
                    self.driver = self._init_driver()
                    log.info(f"üìñ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID –¥–ª—è {url} (Task: {task_id})")

                    self.driver.get(url)
                    time.sleep(5)

                    try:
                        from selenium.webdriver.common.by import By
                        from selenium.webdriver.support.ui import WebDriverWait
                        from selenium.webdriver.support import expected_conditions as EC

                        btn = WebDriverWait(self.driver, self.timeout).until(
                            EC.element_to_be_clickable((By.CLASS_NAME, "button-clear"))
                        )
                        self.driver.execute_script("arguments[0].click();", btn)
                        time.sleep(3)
                        self.progress_callback("‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
                    except Exception as e:
                        log.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è {task_id}: {e}")

                    total = self._total_pages()
                    self.progress_callback(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total}")

                    all_ids = set()
                    failed_pages = []

                    for p in range(1, total + 1):
                        max_retries = 3
                        retry_count = 0
                        page_success = False

                        while retry_count < max_retries and not page_success:
                            try:
                                self._check_timeout()

                                if p > 1:
                                    use_input_field = retry_count > 0
                                    if not self._goto(p, use_input_field=use_input_field):
                                        raise Exception("–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

                                self.progress_callback(f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {p}/{total}")

                                ids = self._ids_on_page()

                                if ids or p == total:
                                    all_ids.update(ids)
                                    page_success = True
                                    self.progress_callback(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {p}/{total} - –Ω–∞–π–¥–µ–Ω–æ {len(ids)} ID")
                                else:
                                    raise Exception(f"–ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {p}")

                            except Exception as e:
                                retry_count += 1
                                self.progress_callback(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {p}, –ø–æ–ø—ã—Ç–∫–∞ {retry_count}")

                                if retry_count < max_retries:
                                    try:
                                        self.driver.quit()
                                    except:
                                        pass

                                    time.sleep(5 * retry_count)
                                    self.driver = self._init_driver()
                                    self.driver.get(url)
                                    time.sleep(5)
                                else:
                                    failed_pages.append(p)
                                    self.progress_callback(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {p} –ø—Ä–æ–ø—É—â–µ–Ω–∞")

                    if failed_pages:
                        self.progress_callback(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {failed_pages}")

                    if os.environ.get('PARSING_PROCESS'):
                        timestamp = datetime.now().isoformat()
                        from database import ensure_store
                        process_store = ensure_store()
                        if url not in process_store["historical_ids"]:
                            process_store["historical_ids"][url] = []
                        process_store["historical_ids"][url].append({
                            "timestamp": timestamp,
                            "ids": list(all_ids)
                        })
                        save_store(process_store)

                    self.progress_callback(f"üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(all_ids)} ID")
                    return all_ids

                except Exception as e:
                    self.progress_callback(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}...")
                    raise e
                finally:
                    if self.driver:
                        try:
                            self.driver.quit()
                        except:
                            pass
                        self.driver = None

        extractor = ProgressExtractor(update_progress)

        if operation == "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ID":
            ids = extractor.extract_ids_sync(url)
            return {"status": "success", "result": list(ids), "error": None}
        elif operation in ["–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ID", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥"]:
            current_ids = extractor.extract_ids_sync(url)
            from database import ensure_store
            process_store = ensure_store()
            prev_ids = set(process_store["last_ids"].get(url, []))
            added = current_ids - prev_ids
            removed = prev_ids - current_ids
            return {
                "status": "success",
                "result": {
                    "current_ids": list(current_ids),
                    "added": list(added),
                    "removed": list(removed)
                },
                "error": None
            }
        else:
            return {"status": "error", "result": None, "error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}"}

    except Exception as e:
        try:
            with open(f"progress_{task_id}.txt", "w", encoding="utf-8") as f:
                f.write(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
        except:
            pass
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è {url} (Task: {task_id}): {e}", exc_info=True)
        return {"status": "error", "result": None, "error": str(e)}
    finally:
        for env_var in ['PARSING_PROCESS', 'PARSING_CHAT_ID', 'PARSING_TASK_ID']:
            if env_var in os.environ:
                del os.environ[env_var]

        try:
            os.remove(f"progress_{task_id}.txt")
        except:
            pass


async def init_executor():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    global executor
    if executor is None:
        executor = ProcessPoolExecutor(max_workers=MAX_CONCURRENT_PARSING)
        log.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—É–ª –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {MAX_CONCURRENT_PARSING} workers")


async def shutdown_executor():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—É–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    global executor
    if executor:
        log.info("üîß –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—É–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        executor.shutdown(wait=True, cancel_futures=True)
        executor = None


async def start_parsing_background_task(task_id: str, chat_id: str, query, url: str,
                                        operation: str, callback, is_auto: bool):
    """–§–û–ù–û–í–ê–Ø –∑–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - –ù–ï –ë–õ–û–ö–ò–†–£–ï–¢ EVENT LOOP"""
    try:
        task_info = {
            "task_id": task_id,
            "url": url,
            "operation": operation,
            "status": "processing",
            "start_time": datetime.now(),
            "chat_id": chat_id,
            "is_auto": is_auto
        }

        active_tasks[task_id] = task_info

        log.info(f"üöÄ –§–û–ù–û–í–´–ô –ó–ê–ü–£–°–ö {task_id}: {operation} –¥–ª—è {url}")
        log.info(f"   üë§ Chat ID: {chat_id}, Auto: {is_auto}")
        log.info(f"   ‚ö° –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(active_tasks)}")

        if query and not is_auto:
            from utils import subj_by_url
            await query.edit_message_text(
                f"üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!\n"
                f"üìö {subj_by_url(url)}\n"
                f"‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(active_tasks)}\n"
                f"üÜî ID: {task_id[:8]}"
            )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        loop = asyncio.get_event_loop()
        future = loop.run_in_executor(
            executor,
            parsing_worker_with_progress,
            url,
            operation,
            chat_id,
            task_id
        )

        running_futures[task_id] = future

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É
        asyncio.create_task(monitor_parsing_progress(task_id, query, url, is_auto))

        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        try:
            result_dict = await future
        except Exception as e:
            log.error(f"‚è∞ –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            if query and not is_auto:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return

        if result_dict and result_dict.get("status") == "success":
            await handle_parsing_success(task_id, result_dict, query, url, operation, callback, is_auto)
        else:
            error = result_dict.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if result_dict else "–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
            await handle_parsing_error(task_id, error, query, operation, is_auto)

    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        await handle_parsing_error(task_id, str(e), query, operation, is_auto)
    finally:
        # –û—á–∏—â–∞–µ–º –∑–∞–¥–∞—á—É
        if task_id in active_tasks:
            del active_tasks[task_id]
        if task_id in running_futures:
            del running_futures[task_id]

        try:
            progress_file = f"progress_{task_id}.txt"
            if os.path.exists(progress_file):
                os.remove(progress_file)
        except:
            pass

        log.info(f"‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –æ—á–∏—â–µ–Ω–∞")


async def monitor_parsing_progress(task_id: str, query, url: str, is_auto: bool):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò"""
    progress_file = f"progress_{task_id}.txt"
    last_progress = ""

    while task_id in running_futures and not running_futures[task_id].done():
        try:
            if os.path.exists(progress_file):
                with open(progress_file, "r", encoding="utf-8") as f:
                    current_progress = f.read().strip()

                if current_progress and current_progress != last_progress and query and not is_auto:
                    try:
                        from utils import subj_by_url
                        await query.edit_message_text(
                            f"üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ\n"
                            f"üìö {subj_by_url(url)}\n"
                            f"üìä {current_progress}\n"
                            f"üÜî ID: {task_id[:8]}"
                        )
                    except Exception as e:
                        log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
                last_progress = current_progress
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è {task_id}: {e}")

        await asyncio.sleep(3)  # –£–≤–µ–ª–∏—á–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏


async def handle_parsing_success(task_id: str, result_dict: dict, query, url: str,
                                 operation: str, callback, is_auto: bool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    try:
        result = result_dict["result"]

        if operation == "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ID":
            from database import save_parsing_result
            save_parsing_result(url, operation, result, task_id)
            final_result = set(result)
        elif operation in ["–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ID", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥"]:
            current_ids = set(result["current_ids"])
            added = set(result["added"])
            removed = set(result["removed"])

            store["last_ids"][url] = list(current_ids)
            save_store(store)

            final_result = (current_ids, added, removed)
        else:
            final_result = result

        if callback:
            await callback(query, None, final_result, url)

        log.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {task_id}: {e}")


async def handle_parsing_error(task_id: str, error: str, query, operation: str, is_auto: bool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    log.error(f"‚ùå –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {error}")

    if query and not is_auto:
        error_msg = error[:100] + "..." if len(error) > 100 else error
        try:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
                f"üìã {operation}\n"
                f"üö´ {error_msg}\n"
                f"üÜî ID: {task_id[:8]}"
            )
        except Exception as e:
            log.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")


async def queue_parsing_task(query, context: ContextTypes.DEFAULT_TYPE, data: str,
                             operation: str, callback, is_auto: bool = False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∫ –§–û–ù–û–í–£–Æ –ó–ê–î–ê–ß–£ - –ù–ï –ë–õ–û–ö–ò–†–£–ï–¢ –ë–û–¢"""
    idx = data.split("_", 1)[1]
    url_map = context.user_data.get(f"{data.split('_')[0]}_map", {})
    url = url_map.get(idx)

    if not url:
        await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    chat_id = str(query.from_user.id)
    task_id = f"{chat_id}_{int(time.time() * 1000000)}"

    log.info(f"üöÄ –ó–ê–ü–£–°–ö –§–û–ù–û–í–û–ô –ó–ê–î–ê–ß–ò {task_id}")
    log.info(f"   Chat ID: {chat_id}, URL: {url}")
    log.info(f"   Operation: {operation}, Auto: {is_auto}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–ø—É—Å–∫–µ
    if query and not is_auto:
        from utils import subj_by_url
        await query.edit_message_text(
            f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...\n"
            f"üìö {subj_by_url(url)}\n"
            f"üÜî ID: {task_id[:8]}\n\n"
            f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
        )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É - –ù–ï –ë–õ–û–ö–ò–†–£–ï–¢
    asyncio.create_task(start_parsing_background_task(
        task_id, chat_id, query, url, operation, callback, is_auto
    ))


async def get_queue_status() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"""
    total_active = len(active_tasks)
    user_tasks = len([t for t in active_tasks.values() if not t.get("is_auto", False)])
    auto_tasks = len([t for t in active_tasks.values() if t.get("is_auto", False)])

    return (f"üìä –°—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á:\n"
            f"‚ö° –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_active}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö: {user_tasks}\n"
            f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö: {auto_tasks}\n"
            f"üíæ –ü–∞–º—è—Ç—å: {psutil.virtual_memory().percent:.1f}%\n"
            f"üñ•Ô∏è CPU: {psutil.cpu_percent():.1f}%"
            )


async def process_queue_manager():
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á - —Ç–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∫–∞"""
    await init_executor()
    log.info("üöÄ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω - –ë–û–¢ –ù–ï –ë–õ–û–ö–ò–†–£–ï–¢–°–Ø!")

    # –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    while True:
        try:
            completed_tasks = [tid for tid, future in running_futures.items() if future.done()]
            for task_id in completed_tasks:
                if task_id in running_futures:
                    del running_futures[task_id]
                if task_id in active_tasks:
                    log.info(f"üßπ –û—á–∏—â–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {task_id}")
                    del active_tasks[task_id]

            await asyncio.sleep(10)
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ: {e}")
            await asyncio.sleep(5)
